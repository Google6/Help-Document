参考 ：https://blog.csdn.net/thedarkfairytale/article/details/79797833

/******************************************************************************************************
@author	ghq
@time	2018-4-2
@topic	定时器
1、定时分执行一次、循环执行
2、单线程和多线程。主线程为单线程有多个定时器，如果每个定时器都用一个线程去实现，有些不太合理，也不易管理。
3、程序本来就是多线程，也会造成更大量的线程，另外定时器事件不太好解决。
4、借鉴boost利用最小堆实现
5、多线程的业务线程中不包含定时器管理器，单独启一个线程用来管理所有定时器，当时间触发时，向业务线程投递定时器消息即可。
******************************************************************************************************/
-------------MyTimer.h
#ifndef	MYTIMER_H
#define	MYTIMER_H
#include <iostream>
#include <functional>
#include <vector>
using namespace std;
 
class TimerManager;
 
class MyTimer
{
public:
	enum class TimerType{ONCE=0,CIRCLE=1};
 
    MyTimer (TimerManager& manager);
    ~MyTimer ();
	//启动一个定时器
	template<typename Func>
    void   start (Func func, unsigned int ms, TimerType type);
    //终止一个定时器
	void   stop ();
private:
	//执行
	void on_timer(unsigned long long now);
private:
	friend class TimerManager;
	TimerManager& manager_;
	//调用函数，包括仿函数
	std::function<void(void)> m_timerfunc;
	TimerType timerType_;
	//间隔
	unsigned int m_nInterval;
	//过期
	unsigned long long  m_nExpires;
	int  m_nHeapIndex;
 
};
 
class TimerManager
{
public:
	//获取当前毫秒数
	static unsigned long long get_current_millisecs();
	//探测执行
	void detect_timers();
 
private:
	friend class MyTimer;
	//添加一个定时器
	void add_timer(MyTimer* timer);
	//移除一个定时器
	void remove_timer(MyTimer* timer);
	//定时上浮
	void up_heap(size_t index);
	//定时下沉
	void down_heap(size_t index);
	//交换两个timer索引
	void swap_heap(size_t index1, size_t index2);
private:
	struct HeapEntry
	{
		unsigned long long time;
		MyTimer* timer;
	};
	std::vector<HeapEntry> heap_;
};
 
template <typename Func>
inline void  MyTimer::start(Func fun, unsigned int interval, TimerType timetpe)
{
	m_nInterval = interval;
	m_timerfunc = fun;
	m_nExpires = interval + TimerManager::get_current_millisecs();
	manager_.add_timer(this);
	timerType_= timetpe;
}
 
#endif
------MyTimer.cpp
#define _CRT_SECURE_NO_WARNINGS
#include "MyTimer.h"
#ifdef _MSC_VER
# include <sys/timeb.h>
#else
# include <sys/time.h>
#endif
 
// Timer
MyTimer::MyTimer(TimerManager& manager)
	: manager_(manager)
	, m_nHeapIndex(-1)
{
 
}
 
MyTimer::~MyTimer()
{
	stop();
}
 
void MyTimer::stop()
{
	if (m_nHeapIndex != -1)
	{
		manager_.remove_timer(this);
		m_nHeapIndex = -1;
	}
}
 
void MyTimer::on_timer(unsigned long long now)
{
	if (timerType_ == TimerType::CIRCLE)
	{
		m_nExpires = m_nInterval + now;
		manager_.add_timer(this);
	}
	else
	{
		m_nHeapIndex = -1;
	}
	m_timerfunc();
}
 
// TimerManager
void TimerManager::add_timer(MyTimer* timer)
{
	//插到数组最后一个位置上，上浮
	timer->m_nHeapIndex = heap_.size();
	HeapEntry entry = { timer->m_nExpires, timer};
	heap_.push_back(entry);
	up_heap(heap_.size() - 1);
}
 
void TimerManager::remove_timer(MyTimer* timer)
{
	//头元素用数组未元素替换，然后下沉
	size_t index = timer->m_nHeapIndex;
	if (!heap_.empty() && index < heap_.size())
	{
		if (index == heap_.size() - 1) //only one timer
		{
			heap_.pop_back();
		}
		else  //more than one
		{
			swap_heap(index, heap_.size() - 1);
			heap_.pop_back();
 
			size_t parent = (index - 1) / 2;
			if (index > 0 && heap_[index].time < heap_[parent].time)
				up_heap(index);
			else
				down_heap(index);
		}
	}
}
 
void TimerManager::detect_timers()
{
	unsigned long long now = get_current_millisecs();
 
	while (!heap_.empty() && heap_[0].time <= now)
	{
		MyTimer* timer = heap_[0].timer;
		remove_timer(timer);
		timer->on_timer(now);
	}
}
 
void TimerManager::up_heap(size_t index)
{
	//下至上，和父节点比较。如果小于父节点上浮
	size_t parent = (index - 1) / 2;
	while (index > 0 && heap_[index].time < heap_[parent].time)
	{
		swap_heap(index, parent);
		index = parent;
		parent = (index - 1) / 2;
	}
}
 
void TimerManager::down_heap(size_t index)
{
	//从上到下，算出左右子节点，和最小的交换
	size_t lchild = index * 2 + 1;
	while (lchild < heap_.size())
	{
		size_t minChild = (lchild + 1 == heap_.size() || heap_[lchild].time < heap_[lchild + 1].time) ? lchild : lchild + 1;
		if (heap_[index].time < heap_[minChild].time)
			break;
		swap_heap(index, minChild);
		index = minChild;
		lchild = index * 2 + 1;
	}
}
 
void TimerManager::swap_heap(size_t index1, size_t index2)
{
	HeapEntry tmp = heap_[index1];
	heap_[index1] = heap_[index2];
	heap_[index2] = tmp;
	heap_[index1].timer->m_nHeapIndex = index1;
	heap_[index2].timer->m_nHeapIndex = index2;
}
 
unsigned long long TimerManager::get_current_millisecs()
{
#ifdef _MSC_VER
	_timeb timebuffer;
	_ftime(&timebuffer);
	unsigned long long ret = timebuffer.time;
	ret = ret * 1000 + timebuffer.millitm;
	return ret;
#else
	timeval tv;
	::gettimeofday(&tv, 0);
	unsigned long long ret = tv.tv_sec;
	return ret * 1000 + tv.tv_usec / 1000;
#endif
}
---------测试
#include "MyTimer.h"
#include <iostream>
#include <chrono>
#include <thread>
using namespace std;
 
void  test()
{
	cout << "test"<<endl;
}
 
void temp_func()
{
	cout << "--------------" << endl;
}
 
int  main()
{
	TimerManager manager;
	MyTimer timer1(manager);
	timer1.start(&test,180, MyTimer::TimerType::CIRCLE);
	MyTimer timer2(manager);
	timer2.start(&temp_func, 200, MyTimer::TimerType::ONCE);
	MyTimer timer3(manager);
	timer3.start(&temp_func, 100, MyTimer::TimerType::ONCE);
	while (1)
	{
		this_thread::sleep_for(chrono::microseconds(200));
		manager.detect_timers();
	}
	getchar();
	getchar();
	return 0;
}
